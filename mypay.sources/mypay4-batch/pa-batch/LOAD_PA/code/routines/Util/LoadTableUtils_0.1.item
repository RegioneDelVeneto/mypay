package routines;

import java.util.Random;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.math.RandomUtils;


public class LoadTableUtils {
    
	public static String cleanLatin(String value) {
		return value.replaceAll("[^\\u0000-\\u007f]+", "");
	}
	
    /**
     * @param minIntervallo (10)
     * @param maxIntervallo (100)
     * @param value
     * @return
     */
    public static int proporzionePopolazione(int minIntervallo, int maxIntervallo, int value) {
    	
    	//GESTISCO IL CASO RVE
    	if (value > Constants.MAX_POPOLAZIONE) {
    		return maxIntervallo;
		}
        
    	double pendenza = ((double)maxIntervallo - (double)minIntervallo) / ((double)Constants.MAX_POPOLAZIONE - (double)Constants.MIN_POPOLAZIONE);
        Double res = (double)minIntervallo + pendenza * (double)value;
        return res.intValue();
    }
    
    /**
     * @param minIntervallo
     * @param maxIntervallo
     * @param value
     * @param percentuale
     * @return
     */
    public static int proporzionePopolazionePercentuale(int minIntervallo, int maxIntervallo, int value, int percentuale) {
    	int proporzione = proporzionePopolazione(minIntervallo, maxIntervallo, value);
    	int result = proporzione * percentuale / 100;
    	return  result > 0 ? result : 1;
    }
    
    public static int doppioProporzionePopolazionePercentuale(int minIntervallo, int maxIntervallo, int value, int percentuale) {
    	int proporzione = proporzionePopolazione(minIntervallo, maxIntervallo, value);
    	int res = proporzione * percentuale / 100;
    	int result = res/value*2;
    	return  result > 0 ? result : 1;
    }
    
    public static String randInt(int min, int max) {

        // NOTE: Usually this should be a field rather than a method
        // variable so that it is not re-seeded every call.
        Random rand = new Random();

        // nextInt is normally exclusive of the top value,
        // so add 1 to make it inclusive
        int randomNum = rand.nextInt((max - min) + 1) + min;

        return "00000" + String.valueOf(randomNum);
    }
    
    public static String randomCivico() {

        // NOTE: Usually this should be a field rather than a method
        // variable so that it is not re-seeded every call.
        Random rand = new Random();

        // nextInt is normally exclusive of the top value,
        // so add 1 to make it inclusive
        int randomNum = rand.nextInt(100) + 1;

        return String.valueOf(randomNum);
    }
    
    public static int proporzioneUtentiPercentuale(int value, int percentuale, int popolazione) {
    	int proporzione = proporzioneUtenti(value, popolazione);
    	int result = proporzione * percentuale / 100;
    	return result > 0 ? result : 1;
    }

	private static int proporzioneUtenti(int value, int popolazione) {
		Double res = (double)Constants.NUM_UTENTI * (double)value / ((double)popolazione);
		return res.intValue() > 0 ? res.intValue() : 1;
	}
	
	public static int proporzione(int fattore_1, int fattore_2, int divisore) {
		Double res = (double)fattore_1 * (double)fattore_2 / ((double)divisore);
		return res.intValue() > 0 ? res.intValue() : 1;
	}	
	
	public static String getEmailAdress(String nome, String cognome, String dominio){
		String result = "example@example.com";
		if (StringUtils.isNotBlank(nome)) {
			result = nome.toLowerCase() + ".";
		}
		if (StringUtils.isNotBlank(cognome)) {
			result += cognome.toLowerCase();
		}
		if (StringUtils.isNotBlank(dominio)) {
			result += dominio.toLowerCase();
		}
		return result;
	}
	
	public static String generateIban() {
		return "IT" + 
	      (RandomUtils.nextInt(98) + 1) + 
	      TalendString.getAsciiRandomString(1) + 
	      StringUtils.leftPad(new Integer((RandomUtils.nextInt(998) + 1)).toString(), 5, "0") +
	      StringUtils.leftPad(new Integer((RandomUtils.nextInt(998) + 1)).toString(), 5, "0") + 
	      StringUtils.leftPad(new Integer((RandomUtils.nextInt(999998) + 1)).toString(), 6, "0") + StringUtils.leftPad(new Integer((RandomUtils.nextInt(999998) + 1)).toString(), 6, "0");		
	}
	
	private static boolean isBetween(int x, int lower, int upper) {
		  return lower <= x && x <= upper;
	}
	
	public static String statisticDovuto(Integer num_riga){
		if (num_riga != null) {
			int mod = num_riga % 100;
			if (isBetween(mod, 0, 39)) {
				return Constants.DOVUTO_ANNULLATO;
			} else if (isBetween(mod, 40, 79)) {
				return Constants.DOVUTO_PAGATO;
			} else if (isBetween(mod, 80, 89)) {
				return Constants.DOVUTO_NON_PAGATO;
			} else if (isBetween(mod, 90, 94)) {
				return Constants.DOVUTO_SCADUTO_ELABORATO;
			} else if (isBetween(mod, 95, 99)) {
				return Constants.DOVUTO_ABORTITO;
			}
			
		}
		
		return Constants.DOVUTO_PAGATO;
	}
	
	public static String statisticCarrello(Integer num_riga){
		if (num_riga != null) {
			int mod = num_riga % 100;
			if (isBetween(mod, 0, 39)) {
				return "PAGATO"; //GENERO LO STESSO ANCHE PERCHE NN HO ANNULLATO
			} else if (isBetween(mod, 40, 79)) {
				return "PAGATO";
			} else if (isBetween(mod, 80, 89)) {
				return "NON_PAGATO";
			} else if (isBetween(mod, 90, 94)) {
				return "SCADUTO_ELABORATO";
			} else if (isBetween(mod, 95, 99)) {
				return "ABORT";
			}
			
		}
		return "PAGATO";
	}
    
}
