/**
 * Please modify this class to meet your needs
 * This class is not complete
 */
package it.regioneveneto.mygov.payment.nodoregionalefesp.server;

import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Holder;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.xmlbeans.XmlError;
import org.apache.xmlbeans.XmlException;
import org.apache.xmlbeans.XmlOptions;
import org.springframework.beans.factory.annotation.Autowired;

import gov.telematici.pagamenti.ws.nodospcpernodoregionale.NodoInviaRispostaRevoca;
import gov.telematici.pagamenti.ws.nodospcpernodoregionale.NodoInviaRispostaRevocaRisposta;
import it.gov.digitpa.schemas.x2011.pagamenti.revoche.CtDatiSingoloEsitoRevoca;
import it.gov.digitpa.schemas.x2011.pagamenti.revoche.CtEsitoRevoca;
import it.gov.digitpa.schemas.x2011.pagamenti.revoche.ERDocument;
import it.regioneveneto.mygov.payment.constants.Constants;
import it.regioneveneto.mygov.payment.constants.FaultCodeConstants;
import it.regioneveneto.mygov.payment.nodoregionalefesp.batch.utils.Costants;
import it.regioneveneto.mygov.payment.nodoregionalefesp.domain.MygovEnte;
import it.regioneveneto.mygov.payment.nodoregionalefesp.domain.MygovFlussoQuadSpc;
import it.regioneveneto.mygov.payment.nodoregionalefesp.domain.MygovFlussoRendSpc;
import it.regioneveneto.mygov.payment.nodoregionalefesp.domain.MygovRrEr;
import it.regioneveneto.mygov.payment.nodoregionalefesp.domain.utils.FespBean;
import it.regioneveneto.mygov.payment.nodoregionalefesp.dto.RrErDettaglioDto;
import it.regioneveneto.mygov.payment.nodoregionalefesp.exceptions.IuvGenerationException;
import it.regioneveneto.mygov.payment.nodoregionalefesp.exceptions.NodoSILInviaRPRispostaException;
import it.regioneveneto.mygov.payment.nodoregionalefesp.pagination.Page;
import it.regioneveneto.mygov.payment.nodoregionalefesp.service.EnteService;
import it.regioneveneto.mygov.payment.nodoregionalefesp.service.FlussoQuadSpcService;
import it.regioneveneto.mygov.payment.nodoregionalefesp.service.FlussoRendSpcService;
import it.regioneveneto.mygov.payment.nodoregionalefesp.service.GiornaleService;
import it.regioneveneto.mygov.payment.nodoregionalefesp.service.IuvGeneratorService;
import it.regioneveneto.mygov.payment.nodoregionalefesp.service.ManageRRService;
import it.regioneveneto.mygov.payment.nodoregionalefesp.service.NodoInviaRPTService;
import it.regioneveneto.mygov.payment.utils.PropertiesUtil;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.ElementoRP;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FlussoSPC;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.ListaRP;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.NodoSILChiediCopiaEsito;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.NodoSILChiediCopiaEsitoRisposta;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.NodoSILChiediInformativaPSP;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.NodoSILChiediInformativaPSPRisposta;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.NodoSILChiediSceltaWISP;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.NodoSILChiediSceltaWISPRisposta;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.NodoSILInviaCarrelloRP;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.NodoSILInviaCarrelloRPRisposta;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.NodoSILInviaRP;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.NodoSILInviaRPRisposta;
import it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.StEffettuazioneScelta;
import it.veneto.regione.pagamenti.nodoregionalefesp.pagamentitelematicirp.PagamentiTelematiciRP;
import it.veneto.regione.schemas.x2012.pagamenti.CtRichiestaPagamento;
import it.veneto.regione.schemas.x2012.pagamenti.RPDocument;

/**
 * This class was generated by Apache CXF 2.7.4
 * 2013-04-16T15:04:47.650+02:00
 * Generated source version: 2.7.4
 *
 */
@javax.jws.WebService(serviceName = "PagamentiTelematiciRPservice", portName = "PagamentiTelematiciRPPort", targetNamespace = "http://_URL_ENTE_/pagamenti/nodoregionalefesp/PagamentiTelematiciRP", wsdlLocation = "classpath:it/regioneveneto/mygov/payment/nodoregionalefesp/server/nodo-regionale-per-pa.wsdl", endpointInterface = "it.veneto.regione.pagamenti.nodoregionalefesp.pagamentitelematicirp.PagamentiTelematiciRP")
public class PagamentiTelematiciRPImpl implements PagamentiTelematiciRP {
	private static final Log LOG = LogFactory.getLog(PagamentiTelematiciRPImpl.class.getName());

	private static final String ESITO_POSITIVO = "OK";

	private static final String ESITO_NEGATIVO = "KO";

	private EnteService enteService;

	private FespBean fespProperties;

	private IuvGeneratorService iuvGeneratorService;

	private FlussoRendSpcService flussoRendSpcService;

	private FlussoQuadSpcService flussoQuadSpcService;

	private NodoInviaRPTService nodoInviaRPTService;

	@Autowired
	private GiornaleService giornaleService;
	
	@Autowired
	private PropertiesUtil propertiesUtil;
	
	private ManageRRService manageRRService;

	/**
	 * @param manageRRService
	 *            the manageRRService to set
	 */
	public void setManageRRService(ManageRRService manageRRService) {
		this.manageRRService = manageRRService;
	}

	/**
	 * @param enteService the enteService to set
	 */
	public void setEnteService(EnteService enteService) {
		this.enteService = enteService;
	}

	/**
	 * @param fespProperties the fespProperties to set
	 */
	public void setFespProperties(FespBean fespProperties) {
		this.fespProperties = fespProperties;
	}

	/**
	 * @param iuvGeneratorService the iuvGeneratorService to set
	 */
	public void setIuvGeneratorService(IuvGeneratorService iuvGeneratorService) {
		this.iuvGeneratorService = iuvGeneratorService;
	}

	public void setFlussoRendSpcService(FlussoRendSpcService flussoRendSpcService) {
		this.flussoRendSpcService = flussoRendSpcService;
	}

	public void setFlussoQuadSpcService(FlussoQuadSpcService flussoQuadSpcService) {
		this.flussoQuadSpcService = flussoQuadSpcService;
	}

	public void setNodoInviaRPTService(NodoInviaRPTService nodoInviaRPTService) {
		this.nodoInviaRPTService = nodoInviaRPTService;
	}

	@Override
	public NodoSILChiediInformativaPSPRisposta nodoSILChiediInformativaPSP(NodoSILChiediInformativaPSP bodyrichiesta) {
		LOG.info("Executing operation nodoSILChiediInformativaPSP (not implemented)");
		return null;
	}
	
	/* (non-Javadoc)
	 * @see it.veneto.regione.pagamenti.pagamentitelematicirp.PagamentiTelematiciRP#nodoSILInviaRP(it.veneto.regione.pagamenti.NodoSILInviaRP  bodyrichiesta ,)it.veneto.regione.pagamenti.ppthead.IntestazionePPT  header )*
	 */
	public NodoSILInviaRPRisposta nodoSILInviaRP(NodoSILInviaRP bodyrichiesta, it.veneto.regione.pagamenti.nodoregionalefesp.ppthead.IntestazionePPT header) {

		LOG.info("Executing operation nodoSILInviaRP");

		/*
		 * LOG GIORNALE DEGLI EVENTI
		 */
		Date dataOraEvento;
		String identificativoDominio;
		String identificativoUnivocoVersamento;
		String codiceContestoPagamento;
		String identificativoPrestatoreServiziPagamento;
		String tipoVersamento;
		String componente;
		String categoriaEvento;
		String tipoEvento;
		String sottoTipoEvento;
		String identificativoFruitore;
		String identificativoErogatore;
		String identificativoStazioneIntermediarioPa;
		String canalePagamento;
		String xmlString;
		JAXBContext context;
		String parametriSpecificiInterfaccia;
		String esitoReq;
		try {
			dataOraEvento = new Date();
			identificativoDominio = header.getIdentificativoDominio();
			identificativoUnivocoVersamento = header.getIdentificativoUnivocoVersamento();
			codiceContestoPagamento = header.getCodiceContestoPagamento();
			identificativoPrestatoreServiziPagamento = bodyrichiesta.getIdentificativoPSP();
			tipoVersamento = null;
			componente = Constants.COMPONENTE.FESP.toString();
			categoriaEvento = Constants.GIORNALE_CATEGORIA_EVENTO.INTERFACCIA.toString();
			tipoEvento = Constants.GIORNALE_TIPO_EVENTO.nodoSILInviaRP.toString();
			sottoTipoEvento = Constants.GIORNALE_SOTTOTIPO_EVENTO.REQUEST.toString();

			identificativoFruitore = header.getIdentificativoDominio();
			identificativoErogatore = fespProperties.getIdentificativoStazioneIntermediarioPa();
			identificativoStazioneIntermediarioPa = fespProperties.getIdentificativoStazioneIntermediarioPa();
			canalePagamento = bodyrichiesta.getIdentificativoCanale();

			xmlString = "";
			try {
				it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.ObjectFactory objectFactory = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.ObjectFactory();
				context = JAXBContext.newInstance(NodoSILInviaRP.class);
				Marshaller marshaller = context.createMarshaller();
				StringWriter sw = new StringWriter();
				marshaller.marshal(objectFactory.createNodoSILInviaRP(bodyrichiesta), sw);
				xmlString = sw.toString();
			}
			catch (JAXBException e) {
				// TODO Auto-generated catch block
				LOG.error(e.getMessage());
			}

			parametriSpecificiInterfaccia = xmlString;

			esitoReq = Constants.GIORNALE_ESITO_EVENTO.OK.toString();

			giornaleService.registraEvento(dataOraEvento, identificativoDominio, identificativoUnivocoVersamento, codiceContestoPagamento,
					identificativoPrestatoreServiziPagamento, tipoVersamento, componente, categoriaEvento, tipoEvento, sottoTipoEvento, identificativoFruitore,
					identificativoErogatore, identificativoStazioneIntermediarioPa, canalePagamento, parametriSpecificiInterfaccia, esitoReq);
		}
		catch (Exception e1) {
			LOG.warn("nodoSILInviaRP REQUEST impossibile inserire nel giornale degli eventi", e1);
		}

		//BEGIN EXECUTE

		NodoSILInviaRPRisposta _rispostaRP;

		try {
			_rispostaRP = nodoInviaRPTService.nodoSILInviaRP(bodyrichiesta, header);
		}
		catch (NodoSILInviaRPRispostaException e) {
			_rispostaRP = e.getNodoSILInviaRPRisposta();
		}

		//END EXECUTE

		/*
		 * LOG GIORNALE DEGLI EVENTI
		 */
		try {
			dataOraEvento = new Date();
			identificativoDominio = header.getIdentificativoDominio();
			identificativoUnivocoVersamento = header.getIdentificativoUnivocoVersamento();
			codiceContestoPagamento = header.getCodiceContestoPagamento();
			identificativoPrestatoreServiziPagamento = bodyrichiesta.getIdentificativoPSP();
			tipoVersamento = null;
			componente = Constants.COMPONENTE.FESP.toString();
			categoriaEvento = Constants.GIORNALE_CATEGORIA_EVENTO.INTERFACCIA.toString();
			tipoEvento = Constants.GIORNALE_TIPO_EVENTO.nodoSILInviaRP.toString();
			sottoTipoEvento = Constants.GIORNALE_SOTTOTIPO_EVENTO.RESPONSE.toString();

			identificativoFruitore = header.getIdentificativoDominio();
			identificativoErogatore = fespProperties.getIdentificativoStazioneIntermediarioPa();
			identificativoStazioneIntermediarioPa = fespProperties.getIdentificativoStazioneIntermediarioPa();
			canalePagamento = bodyrichiesta.getIdentificativoCanale();

			xmlString = "";
			try {
				it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.ObjectFactory objectFactory = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.ObjectFactory();
				context = JAXBContext.newInstance(NodoSILInviaRPRisposta.class);
				Marshaller marshaller = context.createMarshaller();
				StringWriter sw = new StringWriter();
				marshaller.marshal(objectFactory.createNodoSILInviaRPRisposta(_rispostaRP), sw);
				xmlString = sw.toString();
			}
			catch (JAXBException e) {
				// TODO Auto-generated catch block
				LOG.error(e.getMessage());
			}

			parametriSpecificiInterfaccia = xmlString;

			esitoReq = Constants.GIORNALE_ESITO_EVENTO.OK.toString();

			giornaleService.registraEvento(dataOraEvento, identificativoDominio, identificativoUnivocoVersamento, codiceContestoPagamento,
					identificativoPrestatoreServiziPagamento, tipoVersamento, componente, categoriaEvento, tipoEvento, sottoTipoEvento, identificativoFruitore,
					identificativoErogatore, identificativoStazioneIntermediarioPa, canalePagamento, parametriSpecificiInterfaccia, esitoReq);
		}
		catch (Exception e) {
			LOG.warn("nodoSILInviaRP RESPONSE impossibile inserire nel giornale degli eventi", e);
		}

		LOG.info("Ended execution operation nodoSILInviaRP");

		return _rispostaRP;
	}

	/* (non-Javadoc)
	 * @see it.veneto.regione.pagamenti.pagamentitelematicirp.PagamentiTelematiciRP#nodoSILChiediIUV(java.lang.String  identificativoDominio ,)java.lang.String  tipoVersamento ,)java.lang.String  tipoGeneratore ,)java.lang.String  importo ,)it.veneto.regione.pagamenti.FaultBean  fault ,)java.lang.String  identificativoUnivocoVersamento )*
	 */
	public void nodoSILChiediIUV(java.lang.String identificativoDominio, java.lang.String tipoVersamento, java.lang.String tipoGeneratore,
			java.lang.String importo, java.lang.String auxDigit, javax.xml.ws.Holder<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean> fault,
			javax.xml.ws.Holder<java.lang.String> identificativoUnivocoVersamento) {
		LOG.info("Richiesto IUV per identificativoDominio = [" + identificativoDominio + "] - tipoVersamento = [" + tipoVersamento + "] - tipoGeneratore = ["
				+ tipoGeneratore + "] - importo = [" + importo + "]");

		try {
			identificativoUnivocoVersamento.value = iuvGeneratorService.generateIuv(identificativoDominio, tipoVersamento, tipoGeneratore, importo, auxDigit);
			fault = null;
		}
		catch (IuvGenerationException iuve) {
			fault.value = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
			fault.value.setFaultCode(FaultCodeConstants.PAA_SYSTEM_ERROR);
			fault.value.setDescription(iuve.getMessage());
			LOG.info("Errore nella chiamata [nodoSILChiediIUV]: ");
			LOG.info("Fault Code: " + fault.value.getFaultCode());
			LOG.info("Fault Dscription: " + fault.value.getDescription());
			if(StringUtils.isNotBlank(fault.value.getOriginalFaultCode()))
				LOG.info("Original Fault Code " + fault.value.getOriginalFaultCode());
			if(StringUtils.isNotBlank(fault.value.getOriginalDescription()))
				LOG.info("Original Fault Description " + fault.value.getOriginalDescription());
		}
		catch (Exception ex) {
			LOG.error(FaultCodeConstants.PAA_SYSTEM_ERROR + ": [" + ex.getMessage() + "]");
			fault.value = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
			fault.value.setFaultCode(FaultCodeConstants.PAA_SYSTEM_ERROR);
			fault.value.setDescription(ex.getMessage());
		}

		LOG.info("IUV generato = [" + identificativoUnivocoVersamento.value + "]");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * it.veneto.regione.pagamenti.pagamentitelematicirp.PagamentiTelematiciRP
	 * #chiediFlussoSPCPage(java.lang.String, java.lang.String,
	 * java.lang.String, java.lang.String, javax.xml.ws.Holder,
	 * javax.xml.ws.Holder, javax.xml.datatype.XMLGregorianCalendar,
	 * javax.xml.datatype.XMLGregorianCalendar, javax.xml.ws.Holder,
	 * javax.xml.ws.Holder, javax.xml.ws.Holder)
	 */
	public void chiediFlussoSPCPage(String flgTipoFlusso, String identificativoDominio, String identificativoPSP, String flgProdOrDisp, Holder<Integer> page,
			Holder<Integer> pageSize, XMLGregorianCalendar dateFrom, XMLGregorianCalendar dateTo,
			Holder<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean> fault, Holder<Integer> totalRecords,
			Holder<List<FlussoSPC>> flussoSPC) {

		try {
			MygovEnte ente = enteService.getByCodiceFiscale(identificativoDominio);
			String codIpaEnte = ente.getCodIpaEnte();
			if (Costants.VALUE_TIPO_FLUSSO_RENDICONTAZIONE.equalsIgnoreCase(flgTipoFlusso)) {
				getFlussoRendSPCPage(identificativoDominio, codIpaEnte, identificativoPSP, flgProdOrDisp, page, pageSize, dateFrom, dateTo, fault, totalRecords,
						flussoSPC);
			}
			else if (Costants.VALUE_TIPO_FLUSSO_QUADRATURA.equalsIgnoreCase(flgTipoFlusso)) {
				getFlussoQuadSPCPage(identificativoDominio, codIpaEnte, flgProdOrDisp, page, pageSize, dateFrom, dateTo, fault, totalRecords, flussoSPC);
			}
			else {
				LOG.error(FaultCodeConstants.PAA_SYSTEM_ERROR + ": tipo flusso non supportato [" + flgTipoFlusso + "]");
				fault.value = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
				fault.value.setFaultCode(FaultCodeConstants.PAA_SYSTEM_ERROR);
				fault.value.setDescription("Tipo flusso non supportato [" + flgTipoFlusso + "]");
			}
		}
		catch (Exception ex) {
			LOG.error(FaultCodeConstants.PAA_SYSTEM_ERROR + ": [" + ex.getMessage() + "]");
			fault.value = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
			fault.value.setFaultCode(FaultCodeConstants.PAA_SYSTEM_ERROR);
			fault.value.setDescription(ex.getMessage());
		}
	}

	private void getFlussoRendSPCPage(String identificativoDominio, String codIpaEnte, String identificativoPSP, String flgProdOrDisp, Holder<Integer> page,
			Holder<Integer> pageSize, XMLGregorianCalendar dateFrom, XMLGregorianCalendar dateTo,
			Holder<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean> fault, Holder<Integer> totalRecords,
			Holder<List<FlussoSPC>> flussoSPC) throws DatatypeConfigurationException {
		Page<MygovFlussoRendSpc> flussoSPCPage = flussoRendSpcService.getFlussiRendSpcPage(codIpaEnte, identificativoPSP,
				dateFrom.toGregorianCalendar().getTime(), dateTo.toGregorianCalendar().getTime(), flgProdOrDisp, page.value, pageSize.value);

		page.value = flussoSPCPage.getPage();
		pageSize.value = flussoSPCPage.getPageSize();
		totalRecords.value = flussoSPCPage.getTotalRecords();

		GregorianCalendar calendar = new GregorianCalendar();

		List<MygovFlussoRendSpc> mygovFlussoSpcs = flussoSPCPage.getList();
		List<FlussoSPC> flussoSPCs = new ArrayList<FlussoSPC>();
		for (MygovFlussoRendSpc mygovFlussoSpc : mygovFlussoSpcs) {
			FlussoSPC flusso = new FlussoSPC();

			flusso.setFlgTipoFlusso(Costants.VALUE_TIPO_FLUSSO_RENDICONTAZIONE);
			flusso.setIdentificativoDominio(identificativoDominio);
			flusso.setIdentificativoPSP(mygovFlussoSpc.getIdentificativoPsp());
			flusso.setCodIdentificativoFlusso(mygovFlussoSpc.getCodIdentificativoFlusso());
			flusso.setDeNomeFileScaricato(mygovFlussoSpc.getDeNomeFileScaricato());
			flusso.setNumDimensioneFileScaricato(mygovFlussoSpc.getNumDimensioneFileScaricato());

			calendar.setTime(mygovFlussoSpc.getDtDataOraFlusso());
			flusso.setDtDataOraFlusso(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));

			calendar.setTime(mygovFlussoSpc.getDtCreazione());
			flusso.setDtCreazione(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));

			calendar.setTime(mygovFlussoSpc.getDtUltimaModifica());
			flusso.setDtUltimaModifica(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));

			flussoSPCs.add(flusso);
		}
		flussoSPC.value = flussoSPCs;
	}

	private void getFlussoQuadSPCPage(String identificativoDominio, String codIpaEnte, String flgProdOrDisp, Holder<Integer> page, Holder<Integer> pageSize,
			XMLGregorianCalendar dateFrom, XMLGregorianCalendar dateTo,
			Holder<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean> fault, Holder<Integer> totalRecords,
			Holder<List<FlussoSPC>> flussoSPC) throws DatatypeConfigurationException {
		Page<MygovFlussoQuadSpc> flussoSPCPage = flussoQuadSpcService.getFlussiQuadSpcPage(codIpaEnte, dateFrom.toGregorianCalendar().getTime(),
				dateTo.toGregorianCalendar().getTime(), flgProdOrDisp, page.value, pageSize.value);

		page.value = flussoSPCPage.getPage();
		pageSize.value = flussoSPCPage.getPageSize();
		totalRecords.value = flussoSPCPage.getTotalRecords();

		GregorianCalendar calendar = new GregorianCalendar();

		List<MygovFlussoQuadSpc> mygovFlussoSpcs = flussoSPCPage.getList();
		List<FlussoSPC> flussoSPCs = new ArrayList<FlussoSPC>();
		for (MygovFlussoQuadSpc mygovFlussoSpc : mygovFlussoSpcs) {
			FlussoSPC flusso = new FlussoSPC();

			flusso.setFlgTipoFlusso(Costants.VALUE_TIPO_FLUSSO_QUADRATURA);
			flusso.setIdentificativoDominio(identificativoDominio);
			flusso.setIdentificativoPSP(null);
			flusso.setCodIdentificativoFlusso(mygovFlussoSpc.getCodIdentificativoFlusso());
			flusso.setDeNomeFileScaricato(mygovFlussoSpc.getDeNomeFileScaricato());
			flusso.setNumDimensioneFileScaricato(mygovFlussoSpc.getNumDimensioneFileScaricato());

			calendar.setTime(mygovFlussoSpc.getDtDataOraFlusso());
			flusso.setDtDataOraFlusso(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));

			calendar.setTime(mygovFlussoSpc.getDtCreazione());
			flusso.setDtCreazione(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));

			calendar.setTime(mygovFlussoSpc.getDtUltimaModifica());
			flusso.setDtUltimaModifica(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));

			flussoSPCs.add(flusso);
		}
		flussoSPC.value = flussoSPCs;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * it.veneto.regione.pagamenti.pagamentitelematicirp.PagamentiTelematiciRP
	 * #chiediListaFlussiSPC(java.lang.String flgTipoFlusso ,)java.lang.String
	 * identificativoDominio ,)java.lang.String identificativoPSP
	 * ,)javax.xml.datatype.XMLGregorianCalendar dateFrom
	 * ,)javax.xml.datatype.XMLGregorianCalendar dateTo
	 * ,)it.veneto.regione.pagamenti.FaultBean fault ,)java.lang.Integer
	 * totalRecords ,)java.util.List<it.veneto.regione.pagamenti.FlussoSPC>
	 * flussoSPC )*
	 */
	public void chiediListaFlussiSPC(java.lang.String flgTipoFlusso, java.lang.String identificativoDominio, java.lang.String identificativoPSP,
			javax.xml.datatype.XMLGregorianCalendar dateFrom, javax.xml.datatype.XMLGregorianCalendar dateTo,
			javax.xml.ws.Holder<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean> fault,
			javax.xml.ws.Holder<java.lang.Integer> totalRecords,
			javax.xml.ws.Holder<java.util.List<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FlussoSPC>> flussoSPC) {

		LOG.info("Executing operation chiediListaFlussiSPC");
		LOG.info("Parametro input per flgTipoFlusso:" + flgTipoFlusso);
		LOG.info("Parametro input per identificativoDominio:" + identificativoDominio);
		LOG.info("Parametro input per identificativoPSP:" + identificativoPSP);
		LOG.info("Parametro input per dateFrom:" + dateFrom);
		LOG.info("Parametro input per dateTo:" + dateTo);

		try {

			MygovEnte ente = enteService.getByCodiceFiscale(identificativoDominio);

			if (ente == null) {
				LOG.error("NODO_REGIONALE_CHIEDI_LISTA_FLUSSO_SPC: Ente non valido: " + identificativoDominio);

				fault.value = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
				fault.value.setFaultCode("PAA_SYSTEM_ERROR");
				fault.value.setSerial(1);
				fault.value.setId("NODO_REGIONALE_CHIEDI_LISTA_FLUSSO_SPC");
				fault.value.setDescription("Codice fiscale Ente [" + identificativoDominio + "] non valido o non presente in database");

				return;
			}
			String codIpaEnte = ente.getCodIpaEnte();
			if (Costants.VALUE_TIPO_FLUSSO_RENDICONTAZIONE.equalsIgnoreCase(flgTipoFlusso)) {
				getListaFlussiRendSPC(identificativoDominio, codIpaEnte, identificativoPSP, dateFrom, dateTo, fault, totalRecords, flussoSPC);
			}
			else if (Costants.VALUE_TIPO_FLUSSO_QUADRATURA.equalsIgnoreCase(flgTipoFlusso)) {
				getListaFlussiQuadSPC(identificativoDominio, codIpaEnte, dateFrom, dateTo, fault, totalRecords, flussoSPC);
			}
			else {
				LOG.error(FaultCodeConstants.PAA_SYSTEM_ERROR + ": tipo flusso non supportato [" + flgTipoFlusso + "]");
				fault.value = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
				fault.value.setFaultCode(FaultCodeConstants.PAA_SYSTEM_ERROR);
				fault.value.setDescription("Tipo flusso non supportato [" + flgTipoFlusso + "]");
			}
		}
		catch (java.lang.Exception ex) {
			LOG.error(FaultCodeConstants.PAA_SYSTEM_ERROR + ": [" + ex.getMessage() + "]");
			fault.value = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
			fault.value.setFaultCode(FaultCodeConstants.PAA_SYSTEM_ERROR);
			fault.value.setSerial(1);
			fault.value.setId("PAA_CHIEDI_LISTA_FLUSSO_SPC");
			fault.value.setDescription(ex.getMessage());
		}
	}

	public void getListaFlussiQuadSPC(java.lang.String identificativoDominio, String codIpaEnte, javax.xml.datatype.XMLGregorianCalendar dateFrom,
			javax.xml.datatype.XMLGregorianCalendar dateTo,
			javax.xml.ws.Holder<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean> fault,
			javax.xml.ws.Holder<java.lang.Integer> totalRecords,
			javax.xml.ws.Holder<java.util.List<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FlussoSPC>> flussoSPC)
			throws DatatypeConfigurationException {

		List<MygovFlussoQuadSpc> mygovFlussoSpcs = flussoQuadSpcService.getFlussiQuadSpc(codIpaEnte, dateFrom.toGregorianCalendar().getTime(),
				dateTo.toGregorianCalendar().getTime());

		totalRecords.value = mygovFlussoSpcs != null ? mygovFlussoSpcs.size() : 0;

		GregorianCalendar calendar = new GregorianCalendar();
		List<FlussoSPC> flussoSPCs = new ArrayList<FlussoSPC>();
		for (MygovFlussoQuadSpc mygovFlussoSpc : mygovFlussoSpcs) {
			FlussoSPC flusso = new FlussoSPC();

			flusso.setFlgTipoFlusso(Costants.VALUE_TIPO_FLUSSO_QUADRATURA);
			flusso.setIdentificativoDominio(identificativoDominio);
			flusso.setIdentificativoPSP(null);
			flusso.setCodIdentificativoFlusso(mygovFlussoSpc.getCodIdentificativoFlusso());
			LOG.info("Output per CodIdentificativoFlusso:" + mygovFlussoSpc.getCodIdentificativoFlusso());
			flusso.setDeNomeFileScaricato(mygovFlussoSpc.getDeNomeFileScaricato());
			flusso.setNumDimensioneFileScaricato(mygovFlussoSpc.getNumDimensioneFileScaricato());

			calendar.setTime(mygovFlussoSpc.getDtDataOraFlusso());
			flusso.setDtDataOraFlusso(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));
			LOG.info("Output per DtDataOraFlusso estratta:" + mygovFlussoSpc.getDtDataOraFlusso());
			LOG.info("Output per DtDataOraFlusso caricata:" + DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));

			calendar.setTime(mygovFlussoSpc.getDtCreazione());
			flusso.setDtCreazione(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));

			calendar.setTime(mygovFlussoSpc.getDtUltimaModifica());
			flusso.setDtUltimaModifica(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));

			flussoSPCs.add(flusso);
		}
		flussoSPC.value = flussoSPCs;
	}

	public void getListaFlussiRendSPC(java.lang.String identificativoDominio, String codIpaEnte, java.lang.String identificativoPSP,
			javax.xml.datatype.XMLGregorianCalendar dateFrom, javax.xml.datatype.XMLGregorianCalendar dateTo,
			javax.xml.ws.Holder<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean> fault,
			javax.xml.ws.Holder<java.lang.Integer> totalRecords,
			javax.xml.ws.Holder<java.util.List<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FlussoSPC>> flussoSPC)
			throws DatatypeConfigurationException {

		List<MygovFlussoRendSpc> mygovFlussoSpcs = flussoRendSpcService.getFlussiRendSpc(codIpaEnte, identificativoPSP,
				dateFrom.toGregorianCalendar().getTime(), dateTo.toGregorianCalendar().getTime());

		totalRecords.value = mygovFlussoSpcs != null ? mygovFlussoSpcs.size() : 0;

		GregorianCalendar calendar = new GregorianCalendar();
		List<FlussoSPC> flussoSPCs = new ArrayList<FlussoSPC>();
		for (MygovFlussoRendSpc mygovFlussoSpc : mygovFlussoSpcs) {
			FlussoSPC flusso = new FlussoSPC();

			flusso.setFlgTipoFlusso(Costants.VALUE_TIPO_FLUSSO_RENDICONTAZIONE);
			flusso.setIdentificativoDominio(identificativoDominio);
			flusso.setIdentificativoPSP(mygovFlussoSpc.getIdentificativoPsp());
			flusso.setCodIdentificativoFlusso(mygovFlussoSpc.getCodIdentificativoFlusso());
			LOG.info("Output per CodIdentificativoFlusso:" + mygovFlussoSpc.getCodIdentificativoFlusso());
			flusso.setDeNomeFileScaricato(mygovFlussoSpc.getDeNomeFileScaricato());
			flusso.setNumDimensioneFileScaricato(mygovFlussoSpc.getNumDimensioneFileScaricato());

			calendar.setTime(mygovFlussoSpc.getDtDataOraFlusso());
			flusso.setDtDataOraFlusso(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));
			LOG.info("Output per DtDataOraFlusso estratta:" + mygovFlussoSpc.getDtDataOraFlusso());
			LOG.info("Output per DtDataOraFlusso caricata:" + DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));

			calendar.setTime(mygovFlussoSpc.getDtCreazione());
			flusso.setDtCreazione(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));

			calendar.setTime(mygovFlussoSpc.getDtUltimaModifica());
			flusso.setDtUltimaModifica(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));

			flussoSPCs.add(flusso);
		}
		flussoSPC.value = flussoSPCs;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * it.veneto.regione.pagamenti.pagamentitelematicirp.PagamentiTelematiciRP
	 * #chiediFlussoSPC(java.lang.String flgTipoFlusso ,)java.lang.String
	 * identificativoDominio ,)java.lang.String identificativoPSP
	 * ,)java.lang.String codIdentificativoFlusso
	 * ,)javax.xml.datatype.XMLGregorianCalendar dtDataOraFlusso
	 * ,)it.veneto.regione.pagamenti.FaultBean fault ,)java.lang.String stato
	 * ,)java.lang.String downloadURL )*
	 */
	public void chiediFlussoSPC(java.lang.String flgTipoFlusso, java.lang.String identificativoDominio, java.lang.String identificativoPSP,
			java.lang.String codIdentificativoFlusso, javax.xml.datatype.XMLGregorianCalendar dtDataOraFlusso,
			javax.xml.ws.Holder<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean> fault, javax.xml.ws.Holder<java.lang.String> stato,
			javax.xml.ws.Holder<java.lang.String> downloadURL) {

		LOG.info("Executing operation chiediFlussoSPC");
		LOG.info("Parametro input per flgTipoFlusso:" + flgTipoFlusso);
		LOG.info("Parametro input per identificativoDominio:" + identificativoDominio);
		LOG.info("Parametro input per identificativoPSP:" + identificativoPSP);
		LOG.info("Parametro input per codIdentificativoFlusso:" + codIdentificativoFlusso);
		LOG.info("Parametro input per dtDataOraFlusso:" + dtDataOraFlusso);

		try {

			MygovEnte ente = enteService.getByCodiceFiscale(identificativoDominio);

			if (ente == null) {
				LOG.error("paaSILPrenotaExportFlusso: Ente non valido: " + identificativoDominio);

				fault.value = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
				fault.value.setFaultCode("PAA_SYSTEM_ERROR");
				fault.value.setSerial(1);
				fault.value.setId("NODO_REGIONALE_CHIEDI_FLUSSO_SPC");
				fault.value.setDescription("Codice fiscale Ente [" + identificativoDominio + "] non valido o non presente in database");
				stato.value = ESITO_NEGATIVO;
				return;
			}

			if (Costants.VALUE_TIPO_FLUSSO_RENDICONTAZIONE.equalsIgnoreCase(flgTipoFlusso)) {
				MygovFlussoRendSpc mygovFlussoSpc = flussoRendSpcService.getByKeyInsertable(ente.getCodIpaEnte(), identificativoPSP, codIdentificativoFlusso,
						dtDataOraFlusso.toGregorianCalendar().getTime());
				if (mygovFlussoSpc != null) {
					stato.value = ESITO_POSITIVO;
					downloadURL.value = mygovFlussoSpc.getDeNomeFileScaricato();
				}
				else {
					stato.value = ESITO_NEGATIVO;
					downloadURL.value = "";
				}
			}
			else if (Costants.VALUE_TIPO_FLUSSO_QUADRATURA.equalsIgnoreCase(flgTipoFlusso)) {
				MygovFlussoQuadSpc mygovFlussoSpc = flussoQuadSpcService.getByKeyInsertable(ente.getCodIpaEnte(), codIdentificativoFlusso,
						dtDataOraFlusso.toGregorianCalendar().getTime());
				if (mygovFlussoSpc != null) {
					stato.value = ESITO_POSITIVO;
					downloadURL.value = mygovFlussoSpc.getDeNomeFileScaricato();
				}
				else {
					stato.value = ESITO_NEGATIVO;
					downloadURL.value = "";
				}
			}
			else {
				LOG.error(FaultCodeConstants.PAA_SYSTEM_ERROR + ": tipo flusso non supportato [" + flgTipoFlusso + "]");
				fault.value = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
				fault.value.setFaultCode(FaultCodeConstants.PAA_SYSTEM_ERROR);
				fault.value.setDescription("Tipo flusso non supportato [" + flgTipoFlusso + "]");
			}

		}
		catch (java.lang.Exception ex) {
			LOG.error(FaultCodeConstants.PAA_SYSTEM_ERROR + ": [" + ex.getMessage() + "]");
			fault.value = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
			fault.value.setFaultCode(FaultCodeConstants.PAA_SYSTEM_ERROR);
			fault.value.setSerial(1);
			fault.value.setId("PAA_CHIEDI_FLUSSO_SPC");
			fault.value.setDescription(ex.getMessage());
			stato.value = ESITO_NEGATIVO;
		}
	}

	@Override
	public void nodoSILChiediSceltaWISP(String identificativoDominio, String keyPA, String keyWISP, Holder<FaultBean> fault,
			Holder<StEffettuazioneScelta> effettuazioneScelta, Holder<String> identificativoPSP, Holder<String> identificativoIntermediarioPSP,
			Holder<String> identificativoCanale, Holder<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.StTipoVersamento> tipoVersamento,
			Holder<String> disponibilitaServizio, Holder<String> descrizioneServizio, Holder<String> urlInformazioniCanale, Holder<String> urlInformazioniPsp,
			Holder<String> ragioneSociale, Holder<Integer> modelloPagamento, Holder<Integer> stornoPagamento, Holder<byte[]> logoPsp,
			Holder<byte[]> logoServizio, Holder<String> listaFasceCostoServizio) {

		Date dataOraEvento;
		String idDominio;
		String identificativoUnivocoVersamento;
		String codiceContestoPagamento;
		String identificativoPrestatoreServiziPagamento;
		String tipoVers;
		String componente;
		String categoriaEvento;
		String tipoEvento;
		String sottoTipoEvento;
		String identificativoFruitore;
		String identificativoErogatore;
		String identificativoStazioneIntermediarioPa;
		String canalePagamento;
		String parametriSpecificiInterfaccia;
		String esitoReq;
		try {
			try {
				dataOraEvento = new Date();
				idDominio = identificativoDominio;
				identificativoUnivocoVersamento = "";
				codiceContestoPagamento = "n/a";
				identificativoPrestatoreServiziPagamento = "";
				tipoVers = null;
				componente = Constants.COMPONENTE.FESP.toString();
				categoriaEvento = Constants.GIORNALE_CATEGORIA_EVENTO.INTERFACCIA.toString();
				tipoEvento = Constants.GIORNALE_TIPO_EVENTO.nodoSILChiediSceltaWISP.toString();
				sottoTipoEvento = Constants.GIORNALE_SOTTOTIPO_EVENTO.REQUEST.toString();

				identificativoFruitore = identificativoDominio;
				identificativoErogatore = fespProperties.getIdentificativoStazioneIntermediarioPa();
				identificativoStazioneIntermediarioPa = fespProperties.getIdentificativoStazioneIntermediarioPa();
				canalePagamento = "";

				parametriSpecificiInterfaccia = "Parametri di richiesta verso il Nodo SPC: Identificativo dominio [ " + identificativoDominio + " ], KeyPA [ "
						+ keyPA + " ], KeyWISP [ " + keyWISP + " ]";

				esitoReq = Constants.GIORNALE_ESITO_EVENTO.OK.toString();

				giornaleService.registraEvento(dataOraEvento, idDominio, identificativoUnivocoVersamento, codiceContestoPagamento,
						identificativoPrestatoreServiziPagamento, tipoVers, componente, categoriaEvento, tipoEvento, sottoTipoEvento, identificativoFruitore,
						identificativoErogatore, identificativoStazioneIntermediarioPa, canalePagamento, parametriSpecificiInterfaccia, esitoReq);
			}
			catch (Exception e1) {
				LOG.warn("nodoSILChiediSceltaWISP REQUEST impossibile inserire nel giornale degli eventi", e1);
			}

			NodoSILChiediSceltaWISP nodoChiediSceltaWisp = new NodoSILChiediSceltaWISP();

			nodoChiediSceltaWisp.setIdentificativoDominio(identificativoDominio);
			nodoChiediSceltaWisp.setKeyPA(keyPA);
			nodoChiediSceltaWisp.setKeyWISP(keyWISP);

			NodoSILChiediSceltaWISPRisposta risposta = nodoInviaRPTService.nodoChiediSceltaWISP(nodoChiediSceltaWisp);

			if (risposta.getFault() != null) {
				fault.value = risposta.getFault();

				try {
					dataOraEvento = new Date();
					idDominio = identificativoDominio;
					identificativoUnivocoVersamento = "";
					codiceContestoPagamento = "n/a";
					identificativoPrestatoreServiziPagamento = "";
					tipoVers = null;
					componente = Constants.COMPONENTE.FESP.toString();
					categoriaEvento = Constants.GIORNALE_CATEGORIA_EVENTO.INTERFACCIA.toString();
					tipoEvento = Constants.GIORNALE_TIPO_EVENTO.nodoSILChiediSceltaWISP.toString();
					sottoTipoEvento = Constants.GIORNALE_SOTTOTIPO_EVENTO.RESPONSE.toString();

					identificativoFruitore = identificativoDominio;
					identificativoErogatore = fespProperties.getIdentificativoStazioneIntermediarioPa();
					identificativoStazioneIntermediarioPa = fespProperties.getIdentificativoStazioneIntermediarioPa();
					canalePagamento = "";

					parametriSpecificiInterfaccia = "Fault Bean: Id [ " + risposta.getFault().getId() + " ], Fault Code [ " + risposta.getFault().getFaultCode()
							+ " ], Fault String [ " + risposta.getFault().getFaultString() + " ], Fault Description [ " + risposta.getFault().getDescription()
							+ " ], Original Fault Code [ " + (StringUtils.isNotBlank(risposta.getFault().getOriginalFaultCode()) ? risposta.getFault().getOriginalFaultCode() : "")
							+ " ], Original Fault String [ " + (StringUtils.isNotBlank(risposta.getFault().getOriginalFaultString()) ? risposta.getFault().getOriginalFaultString() : "") 
							+ " ], Original Fault Description [ " + (StringUtils.isNotBlank(risposta.getFault().getOriginalDescription()) ? risposta.getFault().getOriginalDescription() : "") 
							+ " ]";

					esitoReq = Constants.GIORNALE_ESITO_EVENTO.OK.toString();

					giornaleService.registraEvento(dataOraEvento, idDominio, identificativoUnivocoVersamento, codiceContestoPagamento,
							identificativoPrestatoreServiziPagamento, tipoVers, componente, categoriaEvento, tipoEvento, sottoTipoEvento,
							identificativoFruitore, identificativoErogatore, identificativoStazioneIntermediarioPa, canalePagamento,
							parametriSpecificiInterfaccia, esitoReq);
				}
				catch (Exception e1) {
					LOG.warn("nodoSILChiediSceltaWISP RESPONSE impossibile inserire nel giornale degli eventi", e1);
				}
			}
			else {

				if (risposta.getEffettuazioneScelta() != null) {
					effettuazioneScelta.value = risposta.getEffettuazioneScelta();
				}
				if (StringUtils.isNotBlank(risposta.getIdentificativoPSP())) {
					identificativoPSP.value = risposta.getIdentificativoPSP();
				}
				if (StringUtils.isNotBlank(risposta.getIdentificativoIntermediarioPSP())) {
					identificativoIntermediarioPSP.value = risposta.getIdentificativoIntermediarioPSP();
				}
				if (StringUtils.isNotBlank(risposta.getIdentificativoCanale())) {
					identificativoCanale.value = risposta.getIdentificativoCanale();
				}
				if (risposta.getTipoVersamento() != null) {
					tipoVersamento.value = risposta.getTipoVersamento();
				}

				if (StringUtils.isNotBlank(risposta.getDisponibilitaServizio())) {
					disponibilitaServizio.value = risposta.getDisponibilitaServizio();
				}

				if (StringUtils.isNotBlank(risposta.getDescrizioneServizio())) {
					descrizioneServizio.value = risposta.getDescrizioneServizio();
				}

				if (StringUtils.isNotBlank(risposta.getUrlInformazioniCanale())) {
					urlInformazioniCanale.value = risposta.getUrlInformazioniCanale();
				}

				if (StringUtils.isNotBlank(risposta.getUrlInformazioniPsp())) {
					urlInformazioniPsp.value = risposta.getUrlInformazioniPsp();
				}

				if (StringUtils.isNotBlank(risposta.getRagioneSociale())) {
					ragioneSociale.value = risposta.getRagioneSociale();
				}

				modelloPagamento.value = risposta.getModelloPagamento();
				stornoPagamento.value = risposta.getStornoPagamento();

				logoPsp.value = risposta.getLogoPsp();

				if (risposta.getLogoServizio() != null) {
					logoServizio.value = risposta.getLogoServizio();
				}

				listaFasceCostoServizio.value = risposta.getListaFasceCostoServizio();

				try {
					dataOraEvento = new Date();
					idDominio = identificativoDominio;
					identificativoUnivocoVersamento = "";
					codiceContestoPagamento = "n/a";
					identificativoPrestatoreServiziPagamento = risposta.getIdentificativoPSP();
					tipoVers = risposta.getTipoVersamento().toString();
					componente = Constants.COMPONENTE.FESP.toString();
					categoriaEvento = Constants.GIORNALE_CATEGORIA_EVENTO.INTERFACCIA.toString();
					tipoEvento = Constants.GIORNALE_TIPO_EVENTO.nodoSILChiediSceltaWISP.toString();
					sottoTipoEvento = Constants.GIORNALE_SOTTOTIPO_EVENTO.RESPONSE.toString();

					identificativoFruitore = identificativoDominio;
					identificativoErogatore = fespProperties.getIdentificativoStazioneIntermediarioPa();
					identificativoStazioneIntermediarioPa = fespProperties.getIdentificativoStazioneIntermediarioPa();
					canalePagamento = risposta.getIdentificativoCanale();

					parametriSpecificiInterfaccia = "Parametri di risposta dal Nodo SPC: Effettuazione Scelta [ " + risposta.getEffettuazioneScelta().toString()
							+ " ], Identificativo PSP [ " + risposta.getIdentificativoPSP() + " ], Identificativo Intermediario PSP [ "
							+ risposta.getIdentificativoIntermediarioPSP() + " ], Identificativo Canale [ " + risposta.getIdentificativoCanale()
							+ " ], Tipo Versamento [ " + risposta.getTipoVersamento().toString() + " ]";

					esitoReq = Constants.GIORNALE_ESITO_EVENTO.OK.toString();

					giornaleService.registraEvento(dataOraEvento, idDominio, identificativoUnivocoVersamento, codiceContestoPagamento,
							identificativoPrestatoreServiziPagamento, tipoVers, componente, categoriaEvento, tipoEvento, sottoTipoEvento,
							identificativoFruitore, identificativoErogatore, identificativoStazioneIntermediarioPa, canalePagamento,
							parametriSpecificiInterfaccia, esitoReq);
				}
				catch (Exception e1) {
					LOG.warn("nodoSILChiediSceltaWISP RESPONSE impossibile inserire nel giornale degli eventi", e1);
				}
			}
		}
		catch (java.lang.Exception ex) {
			LOG.error(FaultCodeConstants.PAA_SYSTEM_ERROR + ": [" + ex.getMessage() + "]", ex);
			fault.value = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
			fault.value.setFaultCode(FaultCodeConstants.PAA_SYSTEM_ERROR);
			fault.value.setSerial(1);
			fault.value.setId(FaultCodeConstants.PAA_CHIEDI_SCELTA_WISP);
			if (ex.getMessage().length() > 256) {
				fault.value.setDescription(ex.getMessage().substring(0, 256));
				fault.value.setFaultString(ex.getMessage().substring(0, 256));
			}
			else {
				fault.value.setDescription(ex.getMessage());
				fault.value.setFaultString(ex.getMessage());
			}

			try {
				dataOraEvento = new Date();
				idDominio = identificativoDominio;
				identificativoUnivocoVersamento = "";
				codiceContestoPagamento = "n/a";
				identificativoPrestatoreServiziPagamento = "";
				tipoVers = null;
				componente = Constants.COMPONENTE.FESP.toString();
				categoriaEvento = Constants.GIORNALE_CATEGORIA_EVENTO.INTERFACCIA.toString();
				tipoEvento = Constants.GIORNALE_TIPO_EVENTO.nodoSILChiediSceltaWISP.toString();
				sottoTipoEvento = Constants.GIORNALE_SOTTOTIPO_EVENTO.REQUEST.toString();

				identificativoFruitore = idDominio;
				identificativoErogatore = fespProperties.getIdentificativoStazioneIntermediarioPa();
				identificativoStazioneIntermediarioPa = fespProperties.getIdentificativoStazioneIntermediarioPa();
				canalePagamento = "";

				parametriSpecificiInterfaccia = "Fault Bean: Id [ " + fault.value.getId() + " ], Fault Code [ " + fault.value.getFaultCode()
						+ " ], Fault String [ " + fault.value.getFaultString() + " ], Fault Description [ " + fault.value.getDescription() 
						+ " ], Original Fault Code [ " + (StringUtils.isNotBlank(fault.value.getOriginalFaultCode()) ? fault.value.getOriginalFaultCode() : "")
						+ " ], Original Fault String [ " + (StringUtils.isNotBlank(fault.value.getOriginalFaultString()) ? fault.value.getOriginalFaultString() : "") 
						+ " ], Original Fault Description [ " + (StringUtils.isNotBlank(fault.value.getOriginalDescription()) ? fault.value.getOriginalDescription() : "") 
						+ " ]";

				esitoReq = Constants.GIORNALE_ESITO_EVENTO.KO.toString();

				giornaleService.registraEvento(dataOraEvento, idDominio, identificativoUnivocoVersamento, codiceContestoPagamento,
						identificativoPrestatoreServiziPagamento, tipoVers, componente, categoriaEvento, tipoEvento, sottoTipoEvento, identificativoFruitore,
						identificativoErogatore, identificativoStazioneIntermediarioPa, canalePagamento, parametriSpecificiInterfaccia, esitoReq);
			}
			catch (Exception e1) {
				LOG.warn("nodoSILChiediSceltaWISP RESPONSE impossibile inserire nel giornale degli eventi", e1);
			}
		}
	}

	@Override
	public void nodoSILChiediCopiaEsito(String identificativoDominio, String identificativoUnivocoVersamento, String codiceContestoPagamento,
			Holder<it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean> fault, Holder<byte[]> esito, Holder<String> tipoFirma,
			Holder<byte[]> rt) {
		try {
			MygovEnte ente = enteService.getByCodiceFiscale(identificativoDominio);
			if (ente == null) {
				LOG.error("nodoSILChiediCopiaEsito: Nessun Ente per codice fiscale [ " + identificativoDominio + " ]");
				it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean fb = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
				fb.setSerial(1);
				fb.setDescription("nodoSILChiediCopiaEsito: Nessun Ente per codice fiscale [ " + identificativoDominio + " ]");
				fb.setFaultCode(FaultCodeConstants.PAA_CHIEDI_COPIA_ESITO_ENTE_NON_PRESENTE);
				fb.setFaultString("nodoSILChiediCopiaEsito: Nessun Ente per codice fiscale [ " + identificativoDominio + " ]");
				fb.setId(FaultCodeConstants.PAA_SYSTEM_ERROR);
				fault.value = fb;
				return;
			}
		}
		catch (Exception e) {
			LOG.error("nodoSILChiediCopiaEsito: Nessun Ente per codice fiscale [ " + identificativoDominio + " ]");
			it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean fb = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
			fb.setSerial(1);
			fb.setDescription("nodoSILChiediCopiaEsito: Nessun Ente per codice fiscale [ " + identificativoDominio + " ]");
			fb.setFaultCode(FaultCodeConstants.PAA_CHIEDI_COPIA_ESITO_ENTE_NON_PRESENTE);
			fb.setFaultString("nodoSILChiediCopiaEsito: Nessun Ente per codice fiscale [ " + identificativoDominio + " ]");
			fb.setId(FaultCodeConstants.PAA_SYSTEM_ERROR);
			fault.value = fb;
			return;
		}
		NodoSILChiediCopiaEsito richiesta = new NodoSILChiediCopiaEsito();
		richiesta.setIdentificativoDominio(identificativoDominio);
		richiesta.setIdentificativoUnivocoVersamento(identificativoUnivocoVersamento);
		richiesta.setCodiceContestoPagamento(codiceContestoPagamento);

		try {
			NodoSILChiediCopiaEsitoRisposta risposta = nodoInviaRPTService.nodoSILChiediCopiaEsito(richiesta);

			if (risposta.getFault() != null) {
				fault.value = risposta.getFault();
				return;
			}
			esito.value = risposta.getEsito();
			tipoFirma.value = risposta.getTipoFirma();
			rt.value = risposta.getRt();
		}
		catch (Exception e) {
			String msg = "Errore nel recupero dell'esito per identificativo dominio [ " + identificativoDominio + " ], IUV [ " + identificativoUnivocoVersamento
					+ " ] e codice contesto pagamento [ " + codiceContestoPagamento + " ]";
			LOG.error(msg, e);
			it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean fb = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
			fb.setSerial(1);
			fb.setDescription(msg);
			fb.setFaultCode(FaultCodeConstants.PAA_CHIEDI_COPIA_ESITO_ERRORE);
			fb.setFaultString(msg);
			fb.setId(FaultCodeConstants.PAA_SYSTEM_ERROR);
			fault.value = fb;
		}
	}

	@Override
	public void nodoSILInviaCarrelloRP(String identificativoDomonioChiamante, ListaRP listaRP, Holder<FaultBean> fault,
			Holder<String> esito, Holder<String> url) {
		
		Date dataOraEvento;
		String identificativoDominio;
		String identificativoUnivocoVersamento;
		String codiceContestoPagamento;
		String identificativoPrestatoreServiziPagamento;
		String tipoVersamento;
		String componente;
		String categoriaEvento;
		String tipoEvento;
		String sottoTipoEvento;
		String identificativoFruitore;
		String identificativoErogatore;
		String identificativoStazioneIntermediarioPa;
		String canalePagamento;
		String xmlString;
		JAXBContext context;
		String parametriSpecificiInterfaccia;
		String esitoReq;
		List<ElementoRP> lista = listaRP.getElementoRP();
		for (ElementoRP singolaRP: lista) {
			try {
				dataOraEvento = new Date();
				identificativoDominio = singolaRP.getIdentificativoDominio();
				identificativoUnivocoVersamento = singolaRP.getIdentificativoUnivocoVersamento();
				codiceContestoPagamento = singolaRP.getCodiceContestoPagamento();
				identificativoPrestatoreServiziPagamento = propertiesUtil.getProperty("nodoRegionaleFesp.pspFittizioIdentificativoPsp");
				tipoVersamento = null;
				componente = Constants.COMPONENTE.FESP.toString();
				categoriaEvento = Constants.GIORNALE_CATEGORIA_EVENTO.INTERFACCIA.toString();
				tipoEvento = Constants.GIORNALE_TIPO_EVENTO.nodoSILInviaCarrelloRP.toString();
				sottoTipoEvento = Constants.GIORNALE_SOTTOTIPO_EVENTO.REQUEST.toString();
	
				identificativoFruitore = identificativoDomonioChiamante;
				identificativoErogatore = fespProperties.getIdentificativoStazioneIntermediarioPa();
				identificativoStazioneIntermediarioPa = fespProperties.getIdentificativoStazioneIntermediarioPa();
				canalePagamento = propertiesUtil.getProperty("nodoRegionaleFesp.pspFittizioIdentificativoCanale");
	            
				xmlString = decode(singolaRP.getRp());
				if (xmlString==null) {
					xmlString = decodificaRp(singolaRP.getRp());
				}
				parametriSpecificiInterfaccia = xmlString;
	
				esitoReq = Constants.GIORNALE_ESITO_EVENTO.OK.toString();
	
				giornaleService.registraEvento(dataOraEvento, identificativoDominio, identificativoUnivocoVersamento, codiceContestoPagamento,
						identificativoPrestatoreServiziPagamento, tipoVersamento, componente, categoriaEvento, tipoEvento, sottoTipoEvento, identificativoFruitore,
						identificativoErogatore, identificativoStazioneIntermediarioPa, canalePagamento, parametriSpecificiInterfaccia, esitoReq);
			}
			catch (Exception e1) {
				LOG.warn("nodoSILInviaRP REQUEST impossibile inserire nel giornale degli eventi", e1);
			}
		}
		
		//BEGIN EXECUTE

		NodoSILInviaCarrelloRPRisposta ncr = null;
		NodoSILInviaCarrelloRP nc = new NodoSILInviaCarrelloRP();
        nc.setIdentificativoDominioEnteChiamante(identificativoDomonioChiamante);
        nc.setListaRP(listaRP);
		
		
		ncr = nodoInviaRPTService.nodoSILInviaCarrelloRP 
					(nc);
		
		//END EXECUTE
		for (ElementoRP singolaRP: lista) {
			try {
				dataOraEvento = new Date();
				identificativoDominio = singolaRP.getIdentificativoDominio();
				identificativoUnivocoVersamento = singolaRP.getIdentificativoUnivocoVersamento();
				codiceContestoPagamento = singolaRP.getCodiceContestoPagamento();
				identificativoPrestatoreServiziPagamento = propertiesUtil.getProperty("nodoRegionaleFesp.pspFittizioIdentificativoPsp");
				tipoVersamento = null;
				componente = Constants.COMPONENTE.FESP.toString();
				categoriaEvento = Constants.GIORNALE_CATEGORIA_EVENTO.INTERFACCIA.toString();
				tipoEvento = Constants.GIORNALE_TIPO_EVENTO.nodoSILInviaCarrelloRP.toString();
				sottoTipoEvento = Constants.GIORNALE_SOTTOTIPO_EVENTO.RESPONSE.toString();
	
				identificativoFruitore = identificativoDomonioChiamante;
				identificativoErogatore = fespProperties.getIdentificativoStazioneIntermediarioPa();
				identificativoStazioneIntermediarioPa = fespProperties.getIdentificativoStazioneIntermediarioPa();
				canalePagamento = propertiesUtil.getProperty("nodoRegionaleFesp.pspFittizioIdentificativoCanale");
	            
				
				xmlString = "";
				try {
					it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.ObjectFactory objectFactory = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.ObjectFactory();
					context = JAXBContext.newInstance(NodoSILInviaCarrelloRPRisposta.class);
					Marshaller marshaller = context.createMarshaller();
					StringWriter sw = new StringWriter();
					marshaller.marshal(objectFactory.createNodoSILInviaCarrelloRPRisposta(ncr), sw);
					xmlString = sw.toString();
				}
				catch (JAXBException e) {
					// TODO Auto-generated catch block
					LOG.error(e.getMessage());
				}
				parametriSpecificiInterfaccia = xmlString;
				esitoReq = Constants.GIORNALE_ESITO_EVENTO.OK.toString();
	
				giornaleService.registraEvento(dataOraEvento, identificativoDominio, identificativoUnivocoVersamento, codiceContestoPagamento,
						identificativoPrestatoreServiziPagamento, tipoVersamento, componente, categoriaEvento, tipoEvento, sottoTipoEvento, identificativoFruitore,
						identificativoErogatore, identificativoStazioneIntermediarioPa, canalePagamento, parametriSpecificiInterfaccia, esitoReq);
			}
			catch (Exception e1) {
				LOG.warn("nodoSILInviaRP REQUEST impossibile inserire nel giornale degli eventi", e1);
			}
		}
		//INSERIRE GIORNALE 2
		fault.value = ncr.getFault();
		esito.value = ncr.getEsito();
		url.value = ncr.getUrl();
	
		
	}
	
	public String decode(byte[] rp)  {
		String decodedString = null;
		byte[] decodedRP = null;
		//TODO: verificare eliminazione (come in NodoInviaRPTServiceImpl)
		decodedRP = Base64.decodeBase64(rp);

		CtRichiestaPagamento ctRichiestaPagamento = null;
		XmlOptions options = new XmlOptions();
		List<XmlError> errors = new ArrayList<XmlError>();
		boolean validXml = false;
		options.setErrorListener(errors);

		RPDocument rpDocument  = null;
		try {
			rpDocument = RPDocument.Factory.parse(new String(decodedRP, "UTF-8"));
			validXml = rpDocument.validate(options);

			if (validXml) {

				ctRichiestaPagamento = rpDocument.getRP();
				decodedString = ctRichiestaPagamento.toString();
				
			}
		} catch (Exception e) {
			LOG.warn("Errore nel decoding della RP");
		}
		
		return decodedString;
	}

	/**
	 * WS esposto dal fesp per pa per l'invio della risposta di revoca al nodo spc
	 * 
	 * PAA_SINTASSI_XSD: in caso di errori nel documento XML RR
	 * 
	 */
	@SuppressWarnings("static-access")
	@Override
	public void nodoSILInviaRispostaRevoca(
			String identificativoDominio,
			String identificativoUnivocoVersamento,
			String codiceContestoPagamento, 
			byte[] er, 
			Holder<FaultBean> fault,
			Holder<String> esito) {
		
		LOG.info("nodoSILInviaRispostaRevoca - Executing operation nodoSILInviaRispostaRevoca");
		
		NodoInviaRispostaRevocaRisposta rispostaER = new NodoInviaRispostaRevocaRisposta();
		
		Date dataOraEvento = new Date();
		String parametriSpecificiInterfaccia = "";
		
		String componente = Constants.COMPONENTE.FESP.toString();
		String categoriaEvento = Constants.GIORNALE_CATEGORIA_EVENTO.INTERFACCIA.toString();
		String tipoEvento = Constants.GIORNALE_TIPO_EVENTO.nodoSILInviaRispostaRevoca.toString();
		String sottoTipoEvento = Constants.GIORNALE_SOTTOTIPO_EVENTO.RESPONSE.toString();
		String identificativoFruitore = Constants.COMPONENTE.PA.toString();
		String erString = "";
		String esitoRes = "";
		String identificativoPrestatoreServiziPagamento = ""; 
		String tipoVersamento = "";
		String identificativoErogatore = "";
		String identificativoStazioneIntermediarioPa = fespProperties.getIdentificativoStazioneIntermediarioPa();
		String identificativoIntermediarioPa = fespProperties.getIdentificativoIntermediarioPa();
		String password = fespProperties.getPassword();
		String canalePagamento = "";
		
		ERDocument erDocument = null;
		CtEsitoRevoca esitoRevoca = null;
		
		fault.value = new it.veneto.regione.pagamenti.nodoregionalefesp.nodoregionaleperpa.FaultBean();
		
		try{
			
			//Log nel giornale degli eventi - ricezione risposta revoca
			erString = Base64.isBase64(er) ? new String(Base64.decodeBase64(er), "UTF-8") : new String(er, "UTF-8");
			parametriSpecificiInterfaccia = "Identificativo dominio: " + identificativoDominio + " - IUV: " + identificativoUnivocoVersamento + 
					" - Codice contesto pagamento: " + codiceContestoPagamento + " - ER: " + erString;
			LOG.info("nodoSILInviaRispostaRevoca - Richiesta: " + parametriSpecificiInterfaccia);
			esitoRes = Constants.GIORNALE_ESITO_EVENTO.OK.toString();
			giornaleService.registraEvento(dataOraEvento, identificativoDominio, identificativoUnivocoVersamento,
					codiceContestoPagamento, identificativoPrestatoreServiziPagamento, tipoVersamento, componente,
					categoriaEvento, tipoEvento, sottoTipoEvento, identificativoFruitore, identificativoErogatore,
					identificativoStazioneIntermediarioPa, canalePagamento, parametriSpecificiInterfaccia,
					esitoRes);
			
		}catch (Exception e) {
			
			//Log nel giornale degli eventi - Errore nell'encoding in UTF-8 della Richiesta di Revoca
			String msg = "nodoSILInviaRispostaRevoca - Errore nell'encoding in UTF-8 della Richiesta di Revoca";
			LOG.error(msg);
			parametriSpecificiInterfaccia = msg;
			esitoRes = Constants.GIORNALE_ESITO_EVENTO.KO.toString();
			giornaleService.registraEvento(dataOraEvento, identificativoDominio, identificativoUnivocoVersamento,
					codiceContestoPagamento, identificativoPrestatoreServiziPagamento, tipoVersamento, componente,
					categoriaEvento, tipoEvento, sottoTipoEvento, identificativoFruitore, identificativoErogatore,
					identificativoStazioneIntermediarioPa, canalePagamento, parametriSpecificiInterfaccia,
					esitoRes);
			
			fault.value.setFaultCode(FaultCodeConstants.PAA_SYSTEM_ERROR);
			fault.value.setFaultString("Errore generico");
			fault.value.setDescription("Errore nell'encoding in UTF-8 della Richiesta di Revoca");
			esito.value = Constants.GIORNALE_ESITO_EVENTO.KO.toString();
		}
		
		//Estraggo esito revoca
		try{
			erDocument = ERDocument.Factory.parse(erString);
			esitoRevoca = erDocument.getER();
		}catch (Exception e) {
			LOG.error("nodoSILInviaRispostaRevoca - Errore parsing esito in ERDocument: " + e.getMessage());
			parametriSpecificiInterfaccia = "nodoSILInviaRispostaRevoca errore parsing esito in ERDocument: [" + e.getMessage() + "]";
			esitoRes = Constants.GIORNALE_ESITO_EVENTO.KO.toString();
			//Log nel giornale degli eventi - Errore parsing esito in ERDocument
			giornaleService.registraEvento(dataOraEvento, identificativoDominio, identificativoUnivocoVersamento,
					codiceContestoPagamento, identificativoPrestatoreServiziPagamento, tipoVersamento, componente,
					categoriaEvento, tipoEvento, sottoTipoEvento, identificativoFruitore, identificativoErogatore,
					identificativoStazioneIntermediarioPa, canalePagamento, parametriSpecificiInterfaccia,
					esitoRes);
			
			fault.value.setFaultCode(FaultCodeConstants.PAA_SINTASSI_XSD);
			fault.value.setFaultString("Errore di sintassi XSD");
			fault.value.setDescription("Errore nella struttura ER inviata");
			esito.value = Constants.GIORNALE_ESITO_EVENTO.KO.toString();
		}
		
		//Recupero richiesta da mygov_revoca by riferimentoMessaggioRevoca e riferimentoDataRevoca
		Calendar dtMsgRrStart = esitoRevoca.getRiferimentoDataRevoca();
		dtMsgRrStart.set(dtMsgRrStart.get(dtMsgRrStart.YEAR), dtMsgRrStart.get(dtMsgRrStart.MONTH), dtMsgRrStart.get(dtMsgRrStart.DATE), 00, 00, 00);
		Calendar dtMsgRrFine = esitoRevoca.getRiferimentoDataRevoca();
		dtMsgRrFine.set(dtMsgRrFine.get(dtMsgRrFine.YEAR), dtMsgRrFine.get(dtMsgRrFine.MONTH), dtMsgRrFine.get(dtMsgRrFine.DATE), 23, 59, 59);

		MygovRrEr richiestaRevoca = this.manageRRService.checkRrByRifMessaggioRevocaDay(esitoRevoca.getRiferimentoMessaggioRevoca(), dtMsgRrStart.getTime(), dtMsgRrFine.getTime());
		
		if (null != richiestaRevoca){

			//Memorizzo esito sul DB
			saveEsitoRevoca(richiestaRevoca.getMygovRrErId(), esitoRevoca, identificativoDominio, identificativoUnivocoVersamento, codiceContestoPagamento);
			
			/**
			 * la componente di fesp predispone il messaggio di Esito Revoca (ER) e
	         * lo invia al NodoSPC utilizzando l'apposita primitiva nodoInviaRispostaRevoca;
			 */
			//BEGIN EXECUTE
			try {
				sottoTipoEvento = Constants.GIORNALE_SOTTOTIPO_EVENTO.REQUEST.toString();
				
				NodoInviaRispostaRevoca bodyrichiesta  = new NodoInviaRispostaRevoca();
				bodyrichiesta.setCodiceContestoPagamento(codiceContestoPagamento);
				bodyrichiesta.setEr(er);
				bodyrichiesta.setIdentificativoDominio(identificativoDominio);
				bodyrichiesta.setIdentificativoIntermediarioPA(identificativoIntermediarioPa);
				bodyrichiesta.setIdentificativoStazioneIntermediarioPA(identificativoStazioneIntermediarioPa);
				bodyrichiesta.setIdentificativoUnivocoVersamento(identificativoUnivocoVersamento);
				bodyrichiesta.setPassword(password);
				
				rispostaER = nodoInviaRPTService.nodoInviaRispostaRevoca(bodyrichiesta);
				
				LOG.info("nodoSILInviaRispostaRevoca - Effettuata chiamata a nodoInviaRispostaRevoca");
				parametriSpecificiInterfaccia = "nodoInviaRispostaRevoca esito: " + rispostaER.getEsito();
				esitoRes = Constants.GIORNALE_ESITO_EVENTO.OK.toString();
				//Log nel giornale degli eventi - Invocazione nodoInviaRispostaRevoca
				giornaleService.registraEvento(dataOraEvento, identificativoDominio, identificativoUnivocoVersamento,
						codiceContestoPagamento, identificativoPrestatoreServiziPagamento, tipoVersamento, componente,
						categoriaEvento, tipoEvento, sottoTipoEvento, identificativoFruitore, identificativoErogatore,
						identificativoStazioneIntermediarioPa, canalePagamento, parametriSpecificiInterfaccia,
						esitoRes);
				
				//Aggiorno esito e faultBean, se presente, ricevuto come risposta da nodoInviaRispostaRevoca
				saveERRisposta(rispostaER, richiestaRevoca.getMygovRrErId());
				
				esito.value = Constants.GIORNALE_ESITO_EVENTO.OK.toString();
				
			}
			catch (NodoSILInviaRPRispostaException e) {
				
				LOG.error("nodoSILInviaRispostaRevoca - Errore chiamata a nodoInviaRispostaRevoca");
				parametriSpecificiInterfaccia = "paaInviaRichiestaRevoca - Errore chiamata a nodoInviaRispostaRevoca";
				esitoRes = Constants.GIORNALE_ESITO_EVENTO.KO.toString();
				//Log nel giornale degli eventi - Errore invocazione nodoInviaRispostaRevoca
				giornaleService.registraEvento(dataOraEvento, identificativoDominio, identificativoUnivocoVersamento,
						codiceContestoPagamento, identificativoPrestatoreServiziPagamento, tipoVersamento, componente,
						categoriaEvento, tipoEvento, sottoTipoEvento, identificativoFruitore, identificativoErogatore,
						identificativoStazioneIntermediarioPa, canalePagamento, parametriSpecificiInterfaccia,
						esitoRes);
				
				
				fault.value.setFaultCode(FaultCodeConstants.PAA_SYSTEM_ERROR);
				fault.value.setFaultString("Errore generico");
				fault.value.setDescription("Errore chiamata a nodoInviaRispostaRevoca");
				esito.value = Constants.GIORNALE_ESITO_EVENTO.KO.toString();
				
			}
		}else{
			
			LOG.info("nodoSILInviaRispostaRevoca - Nessuna RT recuperata per esito inviato");
			parametriSpecificiInterfaccia = "paaInviaRichiestaRevoca - Nessuna RT recuperata per esito inviato";
			esitoRes = Constants.GIORNALE_ESITO_EVENTO.KO.toString();
			//Log nel giornale degli eventi - Errore invocazione nodoInviaRispostaRevoca
			giornaleService.registraEvento(dataOraEvento, identificativoDominio, identificativoUnivocoVersamento,
					codiceContestoPagamento, identificativoPrestatoreServiziPagamento, tipoVersamento, componente,
					categoriaEvento, tipoEvento, sottoTipoEvento, identificativoFruitore, identificativoErogatore,
					identificativoStazioneIntermediarioPa, canalePagamento, parametriSpecificiInterfaccia,
					esitoRes);
			
			fault.value.setFaultCode(FaultCodeConstants.PAA_RT_SCONOSCIUTA);
			fault.value.setFaultString("RT sconosciuta");
			fault.value.setDescription("Nessuna RT recuperata per esito inviato");
			esito.value = Constants.GIORNALE_ESITO_EVENTO.KO.toString();

			}
	}
	
	/**
	 * 
	 * @param rispostaER
	 * @param mygovRevocaId
	 */
	private void saveERRisposta(NodoInviaRispostaRevocaRisposta rispostaER, Long mygovErId) {
		
		gov.telematici.pagamenti.ws.nodospcpernodoregionale.FaultBean esitoFault = rispostaER.getFault();
		String esito = rispostaER.getEsito();
		
		String description = null;
		String faultCode = null;
		String faultString = null;
		String originalDescription = null;
		String originalFaultCode = null;
		String originalFaultString = null;
		String faultId = null;
		Integer faultSerial = null;

		if (null != esitoFault) {
			faultCode = esitoFault.getFaultCode();
			faultString = esitoFault.getFaultString();
			faultId = esitoFault.getId();
			description = esitoFault.getDescription();
			faultSerial = esitoFault.getSerial();
			originalDescription = esitoFault.getOriginalDescription();
			originalFaultCode = esitoFault.getOriginalFaultCode();
			originalFaultString = esitoFault.getOriginalFaultString();
		}

		this.manageRRService.updateRispostaERById(mygovErId, esito, faultCode, faultString, faultId, description, 
				faultSerial, originalDescription, originalFaultCode, originalFaultString);
		
	}

	/**
	 * 
	 * @param idRevoca
	 * @param esitoRevoca
	 * @param identificativoDominio
	 * @param identificativoUnivocoVersamento
	 * @param codiceContestoPagamento
	 */
	private void saveEsitoRevoca(Long idRevoca, CtEsitoRevoca esitoRevoca, String identificativoDominio, 
			String identificativoUnivocoVersamento, String codiceContestoPagamento){
		
		String deErVersioneOggetto = esitoRevoca.getVersioneOggetto();
		String codErDomIdDominio = esitoRevoca.getDominio().getIdentificativoDominio();
		String codErDomIdStazioneRichiedente = esitoRevoca.getDominio().getIdentificativoStazioneRichiedente();
		String codErIdMessaggioEsito = esitoRevoca.getIdentificativoMessaggioEsito();
		Date dtErDataOraMessaggioEsito = esitoRevoca.getDataOraMessaggioEsito().getTime();
		String codErRiferimentoMessaggioRevoca = esitoRevoca.getRiferimentoMessaggioRevoca();
		Date dtErRiferimentoDataRevoca = esitoRevoca.getRiferimentoDataRevoca().getTime(); 
		String deErIstitAttDenominazioneMittente = esitoRevoca.getIstitutoAttestante().getDenominazioneMittente();
		String codErIstitAttUnitOperMittente = esitoRevoca.getIstitutoAttestante().getCodiceUnitOperMittente();
		String deErIstitAttDenomUnitOperMittente = esitoRevoca.getIstitutoAttestante().getDenomUnitOperMittente();
		String deErIstitAttIndirizzoMittente = esitoRevoca.getIstitutoAttestante().getIndirizzoMittente();
		String deErIstitAttCivicoMittente = esitoRevoca.getIstitutoAttestante().getCivicoMittente();
		String codErIstitAttCapMittente = esitoRevoca.getIstitutoAttestante().getCapMittente();
		String deErIstitAttLocalitaMittente = esitoRevoca.getIstitutoAttestante().getLocalitaMittente();
		String deErIstitAttProvinciaMittente = esitoRevoca.getIstitutoAttestante().getProvinciaMittente();
		String codErIstitAttNazioneMittente = esitoRevoca.getIstitutoAttestante().getNazioneMittente();
		String codErIstitAttIdUnivMittTipoIdUnivoco = esitoRevoca.getIstitutoAttestante().getIdentificativoUnivocoMittente().getTipoIdentificativoUnivoco().toString();
		String codErIstitAttIdUnivMittCodiceIdUnivoco = esitoRevoca.getIstitutoAttestante().getIdentificativoUnivocoMittente().getCodiceIdentificativoUnivoco();
		
		// Il soggettoVersante può anche non essere presente
		String codErSoggVersIdUnivVersTipoIdUnivoco = null;
		String codErSoggVersIdUnivVersCodiceIdUnivoco = null;
		String codErSoggVersAnagraficaVersante = null;
		String deErSoggVersIndirizzoVersante = null;
		String deErSoggVersCivicoVersante = null;
		String codErSoggVersCapVersante = null;
		String deErSoggVersLocalitaVersante = null;
		String deErSoggVersProvinciaVersante = null;
		String codErSoggVersNazioneVersante = null;
		String deErSoggVersEmailVersante = null;
		if(null != esitoRevoca.getSoggettoVersante()){
			codErSoggVersIdUnivVersTipoIdUnivoco = esitoRevoca.getSoggettoVersante().getIdentificativoUnivocoVersante().getTipoIdentificativoUnivoco().toString();
			codErSoggVersIdUnivVersCodiceIdUnivoco = esitoRevoca.getSoggettoVersante().getIdentificativoUnivocoVersante().getCodiceIdentificativoUnivoco();
			codErSoggVersAnagraficaVersante = esitoRevoca.getSoggettoVersante().getAnagraficaVersante();
			deErSoggVersIndirizzoVersante = esitoRevoca.getSoggettoVersante().getIndirizzoVersante();
			deErSoggVersCivicoVersante = esitoRevoca.getSoggettoVersante().getCivicoVersante();
			codErSoggVersCapVersante = esitoRevoca.getSoggettoVersante().getCapVersante();
			deErSoggVersLocalitaVersante = esitoRevoca.getSoggettoVersante().getLocalitaVersante();
			deErSoggVersProvinciaVersante = esitoRevoca.getSoggettoVersante().getProvinciaVersante();
			codErSoggVersNazioneVersante = esitoRevoca.getSoggettoVersante().getNazioneVersante();
			deErSoggVersEmailVersante = esitoRevoca.getSoggettoVersante().getEMailVersante();
		}
		
		String codErSoggPagIdUnivPagTipoIdUnivoco = esitoRevoca.getSoggettoPagatore().getIdentificativoUnivocoPagatore().getTipoIdentificativoUnivoco().toString();
		String codErSoggPagIdUnivPagCodiceIdUnivoco = esitoRevoca.getSoggettoPagatore().getIdentificativoUnivocoPagatore().getCodiceIdentificativoUnivoco();
		String codErSoggPagAnagraficaPagatore = esitoRevoca.getSoggettoPagatore().getAnagraficaPagatore();
		String deErSoggPagIndirizzoPagatore = esitoRevoca.getSoggettoPagatore().getIndirizzoPagatore();
		String deErSoggPagCivicoPagatore = esitoRevoca.getSoggettoPagatore().getCivicoPagatore();
		String codErSoggPagCapPagatore = esitoRevoca.getSoggettoPagatore().getCapPagatore();
		String deErSoggPagLocalitaPagatore = esitoRevoca.getSoggettoPagatore().getLocalitaPagatore();
		String deErSoggPagProvinciaPagatore = esitoRevoca.getSoggettoPagatore().getProvinciaPagatore();
		String codErSoggPagNazionePagatore = esitoRevoca.getSoggettoPagatore().getNazionePagatore();
		String deErSoggPagEmailPagatore = esitoRevoca.getSoggettoPagatore().getEMailPagatore();
		
		BigDecimal numErDatiRevImportoTotaleRevocato = esitoRevoca.getDatiRevoca().getImportoTotaleRevocato();
		String codErDatiRevIdUnivocoVersamento = esitoRevoca.getDatiRevoca().getIdentificativoUnivocoVersamento();
		String codErDatiRevCodiceContestoPagamento = esitoRevoca.getDatiRevoca().getCodiceContestoPagamento();
		
		List<RrErDettaglioDto> esitoRevocaPagamentiList = new ArrayList<RrErDettaglioDto>();
		
		if(null != esitoRevoca.getDatiRevoca().getDatiSingolaRevocaArray())
			esitoRevocaPagamentiList = buildErDettaglioPagamentiDto(esitoRevoca.getDatiRevoca().getDatiSingolaRevocaArray());
		
		this.manageRRService.updateERById(idRevoca,  identificativoDominio, identificativoUnivocoVersamento,  codiceContestoPagamento,
				deErVersioneOggetto, codErDomIdDominio, codErDomIdStazioneRichiedente, codErIdMessaggioEsito, dtErDataOraMessaggioEsito,  
				codErRiferimentoMessaggioRevoca, dtErRiferimentoDataRevoca, deErIstitAttDenominazioneMittente, codErIstitAttUnitOperMittente, 
				deErIstitAttDenomUnitOperMittente, deErIstitAttIndirizzoMittente, deErIstitAttCivicoMittente, codErIstitAttCapMittente, 
				deErIstitAttLocalitaMittente, deErIstitAttProvinciaMittente, codErIstitAttNazioneMittente, codErIstitAttIdUnivMittTipoIdUnivoco, 
				codErIstitAttIdUnivMittCodiceIdUnivoco, codErSoggVersIdUnivVersTipoIdUnivoco, codErSoggVersIdUnivVersCodiceIdUnivoco, 
				codErSoggVersAnagraficaVersante, deErSoggVersIndirizzoVersante, deErSoggVersCivicoVersante, codErSoggVersCapVersante, 
				deErSoggVersLocalitaVersante, deErSoggVersProvinciaVersante, codErSoggVersNazioneVersante, deErSoggVersEmailVersante, 
				codErSoggPagIdUnivPagTipoIdUnivoco, codErSoggPagIdUnivPagCodiceIdUnivoco, codErSoggPagAnagraficaPagatore, deErSoggPagIndirizzoPagatore, 
				deErSoggPagCivicoPagatore, codErSoggPagCapPagatore, deErSoggPagLocalitaPagatore, deErSoggPagProvinciaPagatore, codErSoggPagNazionePagatore, 
				deErSoggPagEmailPagatore, numErDatiRevImportoTotaleRevocato, codErDatiRevIdUnivocoVersamento, codErDatiRevCodiceContestoPagamento,
				esitoRevocaPagamentiList);
		
	}
	
	/**
	 * 
	 * @param singEsRev
	 * @return
	 */
	private List<RrErDettaglioDto> buildErDettaglioPagamentiDto(CtDatiSingoloEsitoRevoca[] singEsRev){
		
		List<RrErDettaglioDto> listDto = new ArrayList<RrErDettaglioDto>();
		RrErDettaglioDto dto;
		
		for (CtDatiSingoloEsitoRevoca sng : singEsRev){
			dto = new RrErDettaglioDto();
			
			dto.setCodErDatiSingRevIdUnivocoRiscossione(sng.getIdentificativoUnivocoRiscossione());
			dto.setDeErDatiSingRevCausaleRevoca(sng.getCausaleEsito());
			dto.setDeErDatiSingRevDatiAggiuntiviRevoca(sng.getDatiAggiuntiviEsito());
			dto.setNumErDatiSingRevSingoloImportoRevocato(sng.getSingoloImportoRevocato());
			
			listDto.add(dto);
		}
		
		return listDto;
	}
	
	private String decodificaRp(byte[] rp) {
		String decodedString = null;
		RPDocument rpDocument;

		try {
			String rpString = Base64.isBase64(rp) ? new String(Base64.decodeBase64(rp), "UTF-8") : new String(rp, "UTF-8");
			LOG.debug("decodifica RP: " + rpString);
			rpDocument = RPDocument.Factory.parse(rpString);
			it.veneto.regione.schemas.x2012.pagamenti.CtRichiestaPagamento ctRichiestaPagamento = rpDocument.getRP();
			decodedString = ctRichiestaPagamento.toString();
		} catch (XmlException xmle) {
			throw new RuntimeException("Failed to parse RP ::: XmlException :::", xmle);
		} catch (UnsupportedEncodingException uee) {
			throw new RuntimeException("Failed to parse RP ::: UnsupportedEncodingException :::", uee);
		}
		return decodedString;
	}	

}
